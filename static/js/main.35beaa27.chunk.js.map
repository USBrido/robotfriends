{"version":3,"sources":["serviceWorker.js","Components/card.js","Components/cardlist.js","Components/searchBar.js","Components/scroll.js","Components/ErrorBoundry.js","Containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","card","props","className","alt","src","id","name","email","Cardlist","robots","map","user","i","key","SearchBar","onChange","type","placeholder","scroll","style","overflowY","height","children","ErrorBoundry","state","hasError","error","info","this","setState","hasErrot","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCJSC,EAZF,SAACC,GACZ,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAI,OAAOC,IAAG,+BAA0BH,EAAMI,GAAhC,cACnB,6BACE,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCcHC,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACA,6BAEEA,EAAOC,KAAI,SAACC,EAAMC,GAClB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLP,GAAII,EAAOG,GAAGP,GACdC,KAAMG,EAAOG,GAAGN,KAChBC,MAAOE,EAAOG,GAAGL,aCEVO,EAbG,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB,OACE,yBAAKb,UAAU,OACb,2BAAOA,UAAU,mCACfc,KAAK,SACLC,YAAY,oBACZF,SAAUA,MCEHG,G,MARA,SAACjB,GACd,OACE,yBAAKkB,MAAO,CAACC,UAAW,SAAUC,OAAQ,UACvCpB,EAAMqB,YCiBEC,E,kDAnBb,WAAYtB,GAAQ,IAAD,8BACjB,gBACKuB,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAOC,GACvBC,KAAKC,SAAS,CAACC,UAAU,M,+BAIzB,OAAIF,KAAKJ,MAAMC,SACN,sDAEFG,KAAK3B,MAAMqB,a,GAhBKS,aCiDZC,E,kDA1Cb,aAAc,IAAD,8BACX,gBAYFC,eAAiB,SAACC,GAChB,EAAKL,SAAS,CAACM,YAAaD,EAAME,OAAOC,SAZzC,EAAKb,MAAQ,CACXf,OAAQ,GACR0B,YAAa,IAJJ,E,gEAOO,IAAD,OACjBG,MAAM,8CACHC,MAAK,SAAAC,GAAc,OAAOA,EAASC,UACnCF,MAAK,SAAAG,GAAW,EAAKb,SAAS,CAACpB,OAAQiC,S,+BAOnC,IAAD,EACwBd,KAAKJ,MAA5Bf,EADD,EACCA,OAAQ0B,EADT,EACSA,YACTQ,EAAiBlC,EAAOmC,QAAO,SAAAC,GACnC,OAAOA,EAAMvC,KAAKwC,cAAcC,SAASZ,EAAYW,kBAEvD,OAAKrC,EAAOuC,OAIV,yBAAK9C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWa,SAAUa,KAAKK,iBAC1B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUxB,OAASkC,OARlB,8C,GAxBKZ,aCDlBkB,IAASC,OACP,6BACA,kBAAC,EAAD,OAEAC,SAASC,eAAe,SPwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLiC,QAAQjC,MAAMA,EAAMkC,a","file":"static/js/main.35beaa27.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst card = (props) => {\n  return (\n    <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\n      <img alt='jane' src={`https://robohash.org/${props.id}?200x200`}/>\n      <div>\n        <h2>{props.name}</h2>\n        <p>{props.email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default card;","import React from \"react\";\nimport Card from \"./card\";\n\nconst Cardlist = ({ robots }) => {\n  return (\n  <div>\n    {\n    robots.map((user, i) => {\n    return (\n      <Card\n        key={i}\n        id={robots[i].id}\n        name={robots[i].name}\n        email={robots[i].email}\n      />\n    );\n  })\n}\n  </div>\n    );\n};\n\nexport default Cardlist;\n","import React from 'react'\n\nconst SearchBar = ({ onChange }) => {\n  return (\n    <div className='pa2'>\n      <input className='pa3 ba b--green bg-lightest-blue'\n        type='search' \n        placeholder='search robot here'\n        onChange={onChange}\n      />\n    </div>\n  )\n}\n\n\nexport default SearchBar;","import React from 'react'\n\nconst scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', height: '500px'} }>\n      {props.children}\n    </div> \n  )\n}\n\nexport default scroll\n","import React, { Component } from 'react'\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info){\n    this.setState({hasErrot: true})\n  }\n\n  render(){\n    if (this.state.hasError) {\n      return <h1> Ooops that's not good</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundry","import React, { Component } from 'react';\nimport Cardlist from '../Components/cardlist';\nimport Searchbar from '../Components/searchBar';\nimport { robots } from '../robots';\nimport './App.css'\nimport Scroll from '../Components/scroll.js'\nimport ErrorBoundry from '../Components/ErrorBoundry'\n\nclass App extends Component{\n  constructor(){\n    super()\n    this.state = {\n      robots: [],\n      searchField: ''\n    }\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => { return response.json()})\n      .then(users => { this.setState({robots: users})})\n  }\n\n  onSearchChange = (event) => {\n    this.setState({searchField: event.target.value })\n  }\n\n  render(){\n    const {robots, searchField} = this.state\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n    if (!robots.length) {\n      return <h1>Loading...</h1>\n    } else { \n      return (\n      <div className='tc'>\n        <h1 className='f1'>RoboFriends</h1>\n        <Searchbar onChange={this.onSearchChange}/>\n        <Scroll>\n          <ErrorBoundry>\n            <Cardlist robots={ filteredRobots }/>\n          </ErrorBoundry>\n          \n        </Scroll>\n      </div>\n      )}\n   \n  }\n  \n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport tachyons from 'tachyons';\nimport App from './Containers/App'\n\nReactDOM.render(\n  <div>\n  <App />\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}